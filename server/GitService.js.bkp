const { dirname, relative } = require('path')
const beautify = require('beautify')
const simpleGit = require('simple-git')
const hash = require('object-hash')
const { FsConnector } = require('unifile');
const jsondiffpatch = require('jsondiffpatch').create({
  objectHash: function(obj) {
    // this function is used only to when objects are not equal by ref
    return obj.id || hash(obj);
  },
  arrays: {
    detectMove: false,
  },
})

const parser = require('html2hscript');
const diff = require("virtual-dom/diff")
const patch = require("virtual-dom/patch")
async function diffDom(html1, html2) {
  return new Promise((resolve, reject) => {
    parser(html1, function(err, hscript1) {
      if(err) {
        reject(err)
      } else {
        console.log(hscript1)
        parser(html2, function(err, hscript2) {
          if(err) {
            reject(err)
          } else {
            resolve(diff(hscript1, hscript2))
          }
        })
      }
    })
  })
}
async function patchDom(root, patches) {
  return new Promise((resolve, reject) => {
    // parser(root, function(err, hscript) {
    //   if(err) {
    //     reject(err)
    //   } else {
    //     const patched = patch(hscript, patches)
    //     console.log('=========', {patched})
    //     resolve(patched)
    //   }
    // })
    const patched = patch(root, patches)
    console.log('=========', {patched})
    resolve(patched)
  })
}

/**
 * Service connector extends the local filesystem connector (unifile-fs)
 * The root URL will depend on the user name, i.e. in ${ rootUrl }/${ session.user }/
 */
class GitService extends FsConnector {
  // **
  // extend Fs service
  constructor(config) {
    super(config);
    // change fs infos
    this.name = 'git-service';
    this.infos.name = 'git-service';
    this.infos.displayName = 'Git Service';
    this.infos.description = 'This is a custom service to enable multi-user editing';
  }
  // **
  //Filesystem commands: prepend the user to all paths
  // readdir(session, path) {
  //   return super.readdir(session, `/tmp/${ session.user }/${ path }`)
  // }
  async writeFile(session, path, data) {
    if(path.endsWith('.html')) {
    } else if(path.endsWith('.html.json')) {
      const newData = JSON.parse(data)
      const dir = dirname(path)
      const revparse = await simpleGit(dir).revparse('HEAD')
      const oldRevparse = newData.site.revparse
      delete newData.site.revparse
      console.log('=============', {path, oldRevparse, revparse, dir})
      if(oldRevparse === revparse) {
        return super.writeFile(session, path, beautify(JSON.stringify(newData), { format: 'json' }))
      } else {
        const top = await simpleGit(dir).revparse('--show-toplevel')
        const relPath = relative(top, path)
        console.log('xxxxxxxxxxxxxxxx', {relPath})
        const oldData = JSON.parse(await simpleGit(dir).show(`${oldRevparse}:${relPath}`))
        const delta = jsondiffpatch.diff(oldData, newData)
        await super.writeFile(session, path + '.patch', beautify(JSON.stringify(delta), { format: 'json'}))
        const currentData = JSON.parse((await super.readFile(session, path)).toString())
        console.log('yyyyyyyyyyyyyyy', currentData)
        const finalData = jsondiffpatch.patch(currentData, delta)
        return super.writeFile(session, path, beautify(JSON.stringify(finalData), { format: 'json'}))
      }
    }
    return super.writeFile(session, path, data)
  }
  async readFile(session, path) {
    const data = await super.readFile(session, path)
    if(path.endsWith('.html.json')) {
      const newData = JSON.parse(data.toString())
      const dir = '/' + dirname(path)
      const revparse = await simpleGit(dir).revparse('HEAD')
      console.log('readFile', { revparse })
      return JSON.stringify({
        ...newData,
        site: {
          ...newData.site,
          revparse,
        },
      })
    }
    return data
  }
  // stat(session, path) {
  //   return super.stat(session, `/tmp/${ session.user }/${ path }`)
  // }
  // mkdir(session, path) {
  //   return super.mkdir(session, `/tmp/${ session.user }/${ path }`)
  // }
  // createWriteStream(session, path) {
  //   return super.createWriteStream(session, `/tmp/${ session.user }/${ path }`)
  // }
  // createReadStream(session, path) {
  //   return super.createReadStream(session, `/tmp/${ session.user }/${ path }`)
  // }
  // rename(session, src, dest) {
  //   return super.rename(session, src, dest)
  // }
  // unlink(session, path) {
  //   return super.unlink(session, `/tmp/${ session.user }/${ path }`)
  // }
  // rmdir(session, path) {
  //   return super.rmdir(session, `/tmp/${ session.user }/${ path }`)
  // }
  // batch(session, actions, message) {
  //   return super.batch(session, actions, message)
  // }
}
// export for use in index.js
module.exports = GitService;
